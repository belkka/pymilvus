from ..grpc_handler import GrpcHandler as SyncGrpcHandler


class AsyncGrpcHandler(SyncGrpcHandler):

    def __init__(self, uri=config.GRPC_URI, host="", port="", channel=None, **kwargs):
        ...

    def _set_authorization(self, **kwargs):
        ...

    def __enter__(self):
        ...

    def __exit__(self, exc_type, exc_val, exc_tb):
        ...

    def _wait_for_channel_ready(self, timeout=3):
        ...

    def close(self):
        ...

    def _setup_authorization_interceptor(self, user, password):
        ...

    def _setup_grpc_channel(self):
        ...

    def set_onetime_loglevel(self, log_level):
        ...

    def set_onetime_request_id(self, req_id):
        ...

    def server_address(self):
        ...

    def reset_password(self, user, old_password, new_password, timeout=None):
        ...

    def create_collection(self, collection_name, fields, shards_num=2, timeout=None, **kwargs):
        ...

    def drop_collection(self, collection_name, timeout=None):
        ...

    def alter_collection(self, collection_name, properties, timeout=None, **kwargs):
        ...

    def has_collection(self, collection_name, timeout=None, **kwargs):
        ...

    def describe_collection(self, collection_name, timeout=None, **kwargs):
        ...

    def list_collections(self, timeout=None):
        ...

    def create_partition(self, collection_name, partition_name, timeout=None):
        ...

    def drop_partition(self, collection_name, partition_name, timeout=None):
        ...

    def has_partition(self, collection_name, partition_name, timeout=None):
        ...

    def get_partition_info(self, collection_name, partition_name, timeout=None):
        ...

    def list_partitions(self, collection_name, timeout=None):
        ...

    def get_partition_stats(self, collection_name, partition_name, timeout=None, **kwargs):
        ...

    def _prepare_batch_insert_request(self, collection_name, entities, partition_name=None, timeout=None, **kwargs):
        ...

    def batch_insert(self, collection_name, entities, partition_name=None, timeout=None, **kwargs):
        ...

    def delete(self, collection_name, expression, partition_name=None, timeout=None, **kwargs):
        ...

    def _execute_search_requests(self, requests, timeout=None, **kwargs):
        ...

    def search(self, collection_name, data, anns_field, param, limit,
               expression=None, partition_names=None, output_fields=None,
               round_decimal=-1, timeout=None, schema=None, **kwargs):
        ...

    def get_query_segment_info(self, collection_name, timeout=30, **kwargs):
        ...

    def create_alias(self, collection_name, alias, timeout=None, **kwargs):
        ...

    def drop_alias(self, alias, timeout=None, **kwargs):
        ...

    def alter_alias(self, collection_name, alias, timeout=None, **kwargs):
        ...

    def create_index(self, collection_name, field_name, params, timeout=None, **kwargs):
        ...

    def list_indexes(self, collection_name, timeout=None, **kwargs):
        ...

    def describe_index(self, collection_name, index_name, timeout=None, **kwargs):
        ...

    def get_index_build_progress(self, collection_name, index_name, timeout=None):
        ...

    def get_index_state(self, collection_name: str, index_name: str, timeout=None, **kwargs):
        ...

    def wait_for_creating_index(self, collection_name, index_name, timeout=None, **kwargs):
        ...

    def load_collection(self, collection_name, replica_number=1, timeout=None, **kwargs):
        ...

    def load_collection_progress(self, collection_name, timeout=None):
        ...

    def wait_for_loading_collection(self, collection_name, timeout=None):
        ...

    def release_collection(self, collection_name, timeout=None):
        ...

    def load_partitions(self, collection_name, partition_names, replica_number=1, timeout=None, **kwargs):
        ...

    def wait_for_loading_partitions(self, collection_name, partition_names, timeout=None):
        ...

    def get_loading_progress(self, collection_name, partition_names=None, timeout=None):
        ...

    def get_load_state(self, collection_name, partition_names=None, timeout=None):
        ...

    def load_partitions_progress(self, collection_name, partition_names, timeout=None):
        ...

    def release_partitions(self, collection_name, partition_names, timeout=None):
        ...

    def get_collection_stats(self, collection_name, timeout=None, **kwargs):
        ...

    def get_flush_state(self, segment_ids, timeout=None, **kwargs):
        ...

    def get_persistent_segment_infos(self, collection_name, timeout=None, **kwargs):
        ...

    def _wait_for_flushed(self, segment_ids, timeout=None, **kwargs):
        ...

    def flush(self, collection_names: list, timeout=None, **kwargs):
        ...

    def drop_index(self, collection_name, field_name, index_name, timeout=None, **kwargs):
        ...

    def dummy(self, request_type, timeout=None, **kwargs):
        ...

    def fake_register_link(self, timeout=None):
        ...

    def get(self, collection_name, ids, output_fields=None, partition_names=None, timeout=None):
        ...

    def query(self, collection_name, expr, output_fields=None, partition_names=None, timeout=None, **kwargs):
        ...

    def load_balance(self, collection_name: str, src_node_id, dst_node_ids, sealed_segment_ids, timeout=None, **kwargs):
        ...

    def compact(self, collection_name, timeout=None, **kwargs) -> int:
        ...

    def get_compaction_state(self, compaction_id, timeout=None, **kwargs) -> CompactionState:
        ...

    def wait_for_compaction_completed(self, compaction_id, timeout=None, **kwargs):
        ...

    def get_compaction_plans(self, compaction_id, timeout=None, **kwargs) -> CompactionPlans:
        ...

    def get_replicas(self, collection_name, timeout=None, **kwargs) -> Replica:
        ...

    def do_bulk_insert(self, collection_name, partition_name, files: list, timeout=None, **kwargs) -> int:
        ...

    def get_bulk_insert_state(self, task_id, timeout=None, **kwargs) -> BulkInsertState:
        ...

    def list_bulk_insert_tasks(self, limit, collection_name, timeout=None, **kwargs) -> list:
        ...

    def create_user(self, user, password, timeout=None, **kwargs):
        ...

    def update_password(self, user, old_password, new_password, timeout=None, **kwargs):
        ...

    def delete_user(self, user, timeout=None, **kwargs):
        ...

    def list_usernames(self, timeout=None, **kwargs):
        ...

    def create_role(self, role_name, timeout=None, **kwargs):
        ...

    def drop_role(self, role_name, timeout=None, **kwargs):
        ...

    def add_user_to_role(self, username, role_name, timeout=None, **kwargs):
        ...

    def remove_user_from_role(self, username, role_name, timeout=None, **kwargs):
        ...

    def select_one_role(self, role_name, include_user_info, timeout=None, **kwargs):
        ...

    def select_all_role(self, include_user_info, timeout=None, **kwargs):
        ...

    def select_one_user(self, username, include_role_info, timeout=None, **kwargs):
        ...

    def select_all_user(self, include_role_info, timeout=None, **kwargs):
        ...

    def grant_privilege(self, role_name, object, object_name, privilege, timeout=None, **kwargs):
        ...

    def revoke_privilege(self, role_name, object, object_name, privilege, timeout=None, **kwargs):
        ...

    def select_grant_for_one_role(self, role_name, timeout=None, **kwargs):
        ...

    def select_grant_for_role_and_object(self, role_name, object, object_name, timeout=None, **kwargs):
        ...

    def get_server_version(self, timeout=None, **kwargs) -> str:
        ...
